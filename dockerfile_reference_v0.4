Docker 문법 ( https://docs.docker.com/reference/dockerfile/ )

#		comment
FROM		컨테이너의 BASE IMAGE (운영환경)
MAINTAINER	이미지를 생성한 사람의 이름 및 정보(컨테이너 빌드한 사람, 임의의 Address)
LABEL		컨테이너이미지에 컨테이너의 정보를 저장(설명, 빌드날짜)
RUN		컨테이너 빌드를 위해 base image에서 실행할 commands
COPY		컨테이너 빌드시 호스트 파일을 컨테이너로 복사
ADD		컨테이너 빌드시 호스트의 파일(tar(Tape Archive),url포함)을 컨테이너로 복사
WORKDIR		컨테이너 빌드시 명령이 실행될 작업 디렉터리 설정
ENV		환경변수 지정(컨테이너 내부)
USER		명령 및 컨테이너 실행시 적용할 유저 설정(컨테이너가 만들어지면 기본적으로 root 권한 -> user(su - user))
VOLUME		파일 또는 디렉토리를 컨테이너 디렉토리로 마운트
EXPOSE		컨테이너 동작 시 외부에서 사용할 포트 지정
CMD		컨테이너 동작 시 자동으로 실행할 서비스나 스크립트 지정
ENTRYPOINT	CMD와 함께 사용하면서 command 지정 시 사용


docker 명령어 --help
옵션 
--no-trunc (IMAGE ID Full Name)
--name <name>
-it (docker exec -it webserver /bin/bash -> 
	-i: interactive 	= 컨테이너의 표준 입력(stdin)을 열어두어, 사용자가 명령을 입력할 수 있게 합니다.
	-t: terminal(tty)	= 가상 터미널(tty)를 할당하여, 사용자가 Bash 쉘과 상호작용 할 수 있도록 합니다.) 


Alias 등록
alias cip="docker inspect --format '{{.NetworkSettings.IPAddress}}' webserver"


이미지
이미지 검색			docker search [옵션] <이미지이름:태그명>
이미지 다운로드			docker pull [옵션] <이미지이름:태그명>
다운 받은 이미지 목록 출력	docker images --no-trunc
다운 받은 이미지 상세보기	docker inspect [옵션] <이미지이름:태그명>
이미지 삭제			docker rmi [옵션] <이미지이름>
사용하지 않는 이미지 일괄 삭제	docker image prune


컨테이너 실행 라이프 사이클
pull -> create -> start == run
컨테이너 생성(기본 백그라운드 실행)	docker create [옵션] <이미지이름:태그명>		docker create --name webserver nginx:1.14
컨테이너 실행				docker start [옵션] <이미지이름:태그명>			docker start webserver
컨테이너 생성/실행			docker run [옵션] <이미지이름:태그명>			docker run --name webserver -d nginx:1.14
컨테이너 상태				docker ps [옵션]					docker ps -a
컨테이너 자세히				docker inspect webserver				docker inspect --format '{{.NetworkSettings.IPAddress}}' webserver
컨테이너 실행 중지			docker stop [옵션] 컨테이너이름				docker stop webserver
컨테이너 삭제				docker rm [옵션] 컨테이너이름				docker rm -f webserver
사용하지 않는 컨테이너 일괄 삭제	docker container prune


실행중인 컨테이너 관리
실행중인 컨테이너 목록 확인			docker ps [옵션]
포그라운드로 실행중인 컨테이너에 연결		docker attach [옵션] 컨테이너이름
동작중인 컨테이너에 NEW 명령어 추가 실행 	docker exec [옵션] 컨테이너이름
	$ docker attach centos
	$ docker exec -it webserver /bin/bash
컨테이너에서 동작되는 프로세스 확인		docker top [옵션] 컨테이너이름
동작중인 컨테이너가 생성한 로그 보기		docker logs [옵션] 컨테이너이름			docker logs -f webserver



컨테이너 리소스 제한
Docker command를 통해서 제한할 수 있는 리소스 (docker run --help)
CPU(4 Core의 경우 -> 0, 1, 2, 3)
	--cpus		: 컨테이너에 할당할 CPU core수를 지정						docker run -d --cpus=".5" ubuntu:1.14
				--cpus="1.5" 컨테이너가 최대 1.5개의 CPU 파워 사용가능			
	--cpuset-cpus	: 컨테이너가 사용할 수 있는 CPU나 코어를 할당. cpu index는 0부터.		docker run -d --cpuset-cpus 0-3 ubuntu:1.14
				--cpuset-cpus=0-4
	--cpu-share	: 컨테이너가 사용하는 CPU 비중을 1024 값을 기반으로 설정			docker run -d --cpu-share 2048 ubuntu:1.14
				--cpu-share 2048 기본 값보다 두배 많은 CPU 자원을 할당

Memory(제한 단위는 b, k, m, g로 할당)
	--memory, -m 		: 컨테이너가 사용할 최대 메모리 양을 지정(초과되면 kill됨)		docker run -d -m 512m nginx:1.14
	--memory-swqp 		: 컨테이너가 사용할 스왑 메모리 역역에 대한 설정			docker run -d -m 200m --memory-swap 300m nginx:1.14
					메모리 + 스왑. 생략 시 메모리의 2배가 설정됨
	--memory-reservation 	:--memory 값보다 적은 값으로 구성하는 소프트 제한(보장) 값 설정		docker run -d -m 1g --memory-reservation 500m nginx:1.14
	--oom-kill-disable  	: OOM Killer가 프로세스 kill 하지 못하도록 보호				docker run -d -m 200m --oom-kill-disable nginx:1.14
					(Linux: Out Of Memory)

Disk I/O
	--blkio-weight		| Block IO의 Quota를 설정할 수 있으며 100~1000까지 선택			docker run -it --rm --blkio-weight 100 ubuntu:latest /bin/bash
	--blkio-weight-device	| Default 500

	--blkio-read-bps	| 특정 디바이스에 대한 읽기와 쓰기 작업의 초당 제한을			docker run -it -rm --device-write-bps /dev/vda:1mb ubuntu:latest /bin/bash
	--blkio-write-bps	| kb, mb, gb 단위로 설정						docker run -it -rm --device-write-bps /dev/vda:10mb ubuntu:latest /bin/bash

	--blkio-read-iops	| 컨테이너의 read/write 속ㅇ도의 쿼터를 설정한다			docker run -it -rm --device-write-iops /dev/vda:10 ubuntu:latest /bin/bash
	--blkio-write-iops	| 초당 quota를 제한해서 I/O를 발생시킴. 0 이상의 정수로 표기		docker run -it -rm --device-write-iops /dev/vda:100 ubuntu:latest /bin/bash
				|	(초당 데이터 전송량 = IOPS * 블럭크기(단위 데이터 용량)


docker monitoring commands
docker stat: 실행중인 컨테이너의 런타임 동계를 확인
	docker stats [OPTIONS] [CONTAINER...]
docker event: 도커 호스트의 실시간 event 정보를 수집해서 출력
	docker event -f container=<NAME>
	docker images -f reference=<NAME>
cAdvisor
	https://github.com/google/cadvisor
